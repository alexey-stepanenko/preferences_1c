{1,
{6,
{"Мои шаблоны",1,0,"",""},
{2,
{"Общие конструкции",1,0,"",""},
{1,
{"Выражения языка",1,0,"",""},
{5,
{"Логические выражения",1,0,"",""},
{0,
{"Меньше",0,0,"бб","<"}
},
{0,
{"Больше",0,0,"юю",">"}
},
{0,
{"Меньше или равно",0,0,"бб[=]","<="}
},
{0,
{"Больше или равно",0,0,"юю[=]",">="}
},
{0,
{"Не равно",0,0,"бю","<>"}
}
}
},
{6,
{"Операторы и синтаксические конструкции",1,0,"",""},
{3,
{"Циклы",1,0,"",""},
{0,
{"Пока",0,0,"Пока","Пока <?""Условие""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?""Счетчик""> По <?""Ограничение""> Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для Каждого",0,0,"Для[ Каждого]","Для Каждого <?""Переменная""> Из <?""Коллекция""> Цикл
	<?>
КонецЦикла;"}
}
},
{2,
{"Ветвления",1,0,"",""},
{0,
{"Если",0,0,"Если","Если <?""Условие""> Тогда
	<?>
КонецЕсли;"}
},
{0,
{"ЕслиИначе",0,0,"Если[Иначе]","Если <?""Условие""> Тогда
	<?>
Иначе
	
КонецЕсли;"}
}
},
{3,
{"Процедуры",1,0,"",""},
{0,
{"Процедура",0,0,"Проц[едура]","Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
},
{0,
{"Процедура модуля формы",0,0,"Проц[едура]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
},
{0,
{"Процедура модуля команды",0,0,"Проц[едура]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Процедура <?""Имя процедуры"">()
	<?>
КонецПроцедуры
"}
}
},
{4,
{"Функции",1,0,"",""},
{0,
{"Функция",0,0,"Функ[ция]","Функция <?""Имя функции"">()
	Результат = Неопределено;
	<?>
	Возврат Результат;
КонецФункции
"}
},
{0,
{"Функция модуля формы",0,0,"Функ[ция]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">()
	Результат = Неопределено;
	<?>
	Возврат Результат;
КонецФункции
"}
},
{0,
{"Функция модуля команды",0,0,"Функ[ция]","&<?""Выберите директиву компиляции"", ВыборВарианта, ""НаКлиенте"", ""НаКлиенте"", ""НаСервере"", ""НаСервере"", ""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"">
Функция <?""Имя функции"">()
	Результат = Неопределено;
	<?>
	Возврат Результат;
КонецФункции
"}
},
{0,
{"Функция - текст запроса",0,0,"ТекстЗ[апроса]","&НаСервере
Функция ТекстЗапроса<?""Имя функции"">()
	Возврат ""<?"""", ТекстЗапроса>"";
КонецФункции
"}
}
},
{11,
{"Области",1,0,"",""},
{0,
{"Область",0,0,"Обл[асть]","#Область <?""Имя области"">
<?>
#КонецОбласти"}
},
{0,
{"Области общего модуля",0,0,"Обл[асть]","#Область ПрограммныйИнтерфейс
// Раздел содержит экспортные процедуры и функции, предназначенные для использования другими объектами 
// конфигурации или другими программами (например, через внешнее соединение).
<?>
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Раздел предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем 
// должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других 
// функциональных подсистем этой же библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, 
// когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько 
// объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
// предназначенные только для вызова из других объектов данной подсистемы.
#КонецОбласти

"}
},
{0,
{"Области модуля объекта, менеджера, набора записей и т.д.",0,0,"Обл[асть]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
<?>
#КонецОбласти

#Область ПрограммныйИнтерфейс
// Раздел содержит экспортные процедуры и функции, предназначенные для использования в других модулях 
// конфигурации или другими программами (например, через внешнее соединение). Не следует в этот раздел
// помещать экспортные функции и процедуры, которые предназначены для вызова исключительно из модулей
// самого объекта, его форм и команд. Например, процедуры заполнения табличной части документа, 
// которые вызываются из обработки заполнения в модуле объекта и из формы документа в обработчике 
// команды формы не являются программным интерфейсом модуля объекта, т.к. вызываются только в самом 
// модуле и из форм этого же объекта. Их следует размещать в разделе ""Служебные процедуры и функции"".
#КонецОбласти

#Область ОбработчикиСобытий
// Раздел содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.)
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Раздел предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем 
// должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других 
// функциональных подсистем этой же библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, 
// когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько 
// объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
// предназначенные только для вызова из других объектов данной подсистемы.
#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Области модуля формы",0,0,"Обл[асть]","#Область ОписаниеПеременных
<?>
#КонецОбласти

#Область ОбработчикиСобытийФормы
// Раздел содержит процедуры-обработчики событий формы: ПриСозданииНаСервере, ПриОткрытии и т.п.
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Раздел содержит процедуры-обработчики элементов, расположенных в основной части формы 
// (все, что не связано с таблицами на форме).
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицыФормы
// В разделах размещаются процедуры-обработчики таблиц формы и элементов таблиц. Для процедур-обработчиков 
// каждой таблицы должен быть создан свой раздел.
#КонецОбласти

#Область ОбработчикиКомандФормы
// Раздел содержит процедуры-обработчики команд формы (имена которых задаются в свойстве Действие команд формы).
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, 
// когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько 
// объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
// предназначенные только для вызова из других объектов данной подсистемы.
#КонецОбласти
"}
},
{0,
{"Области команд",0,0,"Обл[асть]","#Область ОбработчикиСобытий
// Раздел содержит процедуру-обработчик команды ОбработкаКоманды.
<?>
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Раздел содержит процедуры и функции, составляющие внутреннюю реализацию общего модуля. В тех случаях, 
// когда общий модуль является частью некоторой функциональной подсистемы, включающей в себя несколько 
// объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
// предназначенные только для вызова из других объектов данной подсистемы.
#КонецОбласти
"}
},
{0,
{"Область ""ОписаниеПеременных""",0,0,"Обл[асть]","#Область ОписаниеПеременных
<?>
#КонецОбласти
"}
},
{0,
{"Область ""ПрограммныйИнтерфейс""",0,0,"Обл[асть]","#Область ПрограммныйИнтерфейс
<?>
#КонецОбласти
"}
},
{0,
{"Область ""ОбработчикиСобытий""",0,0,"Обл[асть]","#Область ОбработчикиСобытий
<?>
#КонецОбласти
"}
},
{0,
{"Область ""СлужебныйПрограммныйИнтерфейс""",0,0,"Обл[асть]","#Область СлужебныйПрограммныйИнтерфейс
<?>
#КонецОбласти
"}
},
{0,
{"Область ""СлужебныеПроцедурыИФункции""",0,0,"Обл[асть]","#Область СлужебныеПроцедурыИФункции
<?>
#КонецОбласти
"}
},
{0,
{"Область ""Инициализация""",0,0,"Обл[асть]","#Область Инициализация
<?>
#КонецОбласти
"}
}
},
{3,
{"Попытка и транзакции",1,0,"",""},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение

	ВызватьИсключение;
КонецПопытки;"}
},
{0,
{"Транзакция (ИТС)",0,0,"Тран[закция]","// Шаблон: https://its.1c.ru/db/v8std/content/783/hdoc
//
// Дополнительные материалы:
// * Транзакции: правила использования (https://its.1c.ru/db/v8std/content/783/hdoc)
// * Безопасная работа с транзакциями во встроенном языке (https://infostart.ru/1c/articles/1026771/)
// * Вы не умеете работать с транзакциями (https://habr.com/ru/articles/419715/)
// * Транзакции и исключения в 1С. Как правильно готовить? (https://youtu.be/IDNoe_-fg_Y)
НачатьТранзакцию();
Попытка
	// Работа с данными
	ЗафиксироватьТранзакцию();
Исключение
	ОтменитьТранзакцию();
	ЗаписьЖурналаРегистрации(
		НСтр(""ru = 'Выполнение операции'""),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
	);

	ВызватьИсключение;
КонецПопытки;"}
},
{0,
{"Транзакция (EvilBeaver)",0,0,"Тран[закция]","// Шаблон: https://habr.com/ru/articles/419715/
//
// Дополнительные материалы:
// * Транзакции: правила использования (https://its.1c.ru/db/v8std/content/783/hdoc)
// * Безопасная работа с транзакциями во встроенном языке (https://infostart.ru/1c/articles/1026771/)
// * Вы не умеете работать с транзакциями (https://habr.com/ru/articles/419715/)
// * Транзакции и исключения в 1С. Как правильно готовить? (https://youtu.be/IDNoe_-fg_Y)
НачатьТранзакцию();
Попытка
	// Работа с данными
	ЗафиксироватьТранзакцию();
Исключение
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
    КонецЕсли;
	ЗаписьЖурналаРегистрации(
		НСтр(""ru = 'Выполнение операции'""),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
	);

	ВызватьИсключение;
КонецПопытки;
"}
}
}
}
},
{3,
{"Общие объекты",1,0,"",""},
{1,
{"Работа с файлами",1,0,"",""},
{2,
{"ДиалогВыбораФайла",1,0,"",""},
{0,
{"Открытие файла",0,0,"Диалог[ВыбораФайла]","// === НАЧАЛО ШАБЛОНА ===
// Требуется пост обработка кода. См. дополнительные комментарии к к процедурам и областям
// ======================

// ===
// * В случае переноса процедуры целиком:
//   - Проверить установку обработчика события ""НачалоВыбора"" элемента ""<?""Имя элемента формы"">""
//   - Перенести процедуру в область ""ОбработчикиСобытийЭлементовШапкиФормы""
// * В случае переноса кода процедуры проверить наименование процедуры в описании оповещения
//   строки ""Диалог.Показать....""
// ===
&НаКлиенте
Процедура <?""Имя элемента формы"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	СформироватьФильтрДиалога(ДиалогОткрытияФайла);
	ДиалогОткрытияФайла.МножественныйВыбор = <?""Множественный выбор"", ВыборВарианта, ""Выбор одного файла"", ""Ложь"", ""Выбор нескольких файлов"", ""Истина"">;
	ДиалогОткрытияФайла.ПроверятьСуществованиеФайла = Истина;
	
	Диалог.Показать(Новый ОписаниеОповещения(""<?""Имя элемента формы"">НачалоВыбораЗавершение"", ЭтотОбъект));
	
КонецПроцедуры // <?""Имя элемента формы"">НачалоВыбора

// ===
// Перенести процедуры в область ""СлужебныеПроцедурыИФункции"". 
// Дополнительно можно поместить в отдельную область ""РаботаСДиалогами""
// ===
#Область РаботаСДиалогами
	
&НаКлиенте
Процедура СформироватьФильтрДиалога(ДиалогВыбораФайла)

	ФильтрДиалога = СоздатьФильтрДиалога();
	//ДобавитьФильтрДиалога(ФильтрДиалога, ""Файлы Excel"", ""*.xlsx,*.xls"");
	ДобавитьФильтрДиалога(ФильтрДиалога, ""Все файлы"", ""*.*"");
	ДиалогВыбораФайла.Фильтр = НСтр(СтрШаблон(""ru='%1'"", СтрокаФильтра(ФильтрДиалога)));

КонецПроцедуры // СформироватьФильтрДиалога()

&НаКлиенте
Функция СоздатьФильтрДиалога()

	Возврат Новый Массив;

КонецФункции // СоздатьФильтрДиалога()

&НаКлиенте
Процедура ДобавитьФильтрДиалога(ФильтрДиалога, ИмяФильтра, ЗначениеФильтра)

	ФильтрДиалога.Добавить(СтрШаблон(""%1, (%2)"", ИмяФильтра, ЗначениеФильтра));
	ФильтрДиалога.Добавить(ЗначениеФильтра);

КонецПроцедуры // ДобавитьФильтрДиалога()

&НаКлиенте
Функция СтрокаФильтра(ФильтрДиалога)

	Возврат СтрСоединить(ФильтрДиалога, ""|"");

КонецФункции // СтрокаФильтра()


#КонецОбласти

// ===
// Перенести процедуру в область ""СлужебныеПроцедурыИФункции"". 
// ===
&НаКлиенте
Процедура <?""Имя элемента формы"">НачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры)

	Если ВыбранныеФайлы = Неопределено Тогда
	
		Возврат
	
	КонецЕсли;
	
	// ===
	// Код обработки выбора файла
	// ===

КонецПроцедуры // <?""Имя элемента формы"">НачалоВыбораЗавершение()

// === КОНЕЦ ШАБЛОНА ===
"}
},
{0,
{"Сохранение файла",0,0,"Диалог[ВыбораФайла]","// === НАЧАЛО ШАБЛОНА ===
// Требуется пост обработка кода. См. дополнительные комментарии к к процедурам и областям
// ======================

// ===
// * В случае переноса процедуры целиком:
//   - Проверить установку обработчика события ""НачалоВыбора"" элемента ""<?""Имя элемента формы"">""
//   - Перенести процедуру в область ""ОбработчикиСобытийЭлементовШапкиФормы""
// * В случае переноса кода процедуры проверить наименование процедуры в описании оповещения
//   строки ""Диалог.Показать....""
// ===
&НаКлиенте
Процедура <?""Имя элемента формы"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	СформироватьФильтрДиалога(ДиалогОткрытияФайла);
	
	Диалог.Показать(Новый ОписаниеОповещения(""<?""Имя элемента формы"">НачалоВыбораЗавершение"", ЭтотОбъект));
	
КонецПроцедуры // <?""Имя элемента формы"">НачалоВыбора

// ===
// Перенести процедуры в область ""СлужебныеПроцедурыИФункции"". 
// Дополнительно можно поместить в отдельную область ""РаботаСДиалогами""
// ===
#Область РаботаСДиалогами
	
&НаКлиенте
Процедура СформироватьФильтрДиалога(ДиалогВыбораФайла)

	ФильтрДиалога = СоздатьФильтрДиалога();
	//ДобавитьФильтрДиалога(ФильтрДиалога, ""Файлы Excel"", ""*.xlsx,*.xls"");
	ДобавитьФильтрДиалога(ФильтрДиалога, ""Все файлы"", ""*.*"");
	ДиалогВыбораФайла.Фильтр = НСтр(СтрШаблон(""ru='%1'"", СтрокаФильтра(ФильтрДиалога)));

КонецПроцедуры // СформироватьФильтрДиалога()

&НаКлиенте
Функция СоздатьФильтрДиалога()

	Возврат Новый Массив;

КонецФункции // СоздатьФильтрДиалога()

&НаКлиенте
Процедура ДобавитьФильтрДиалога(ФильтрДиалога, ИмяФильтра, ЗначениеФильтра)

	ФильтрДиалога.Добавить(СтрШаблон(""%1, (%2)"", ИмяФильтра, ЗначениеФильтра));
	ФильтрДиалога.Добавить(ЗначениеФильтра);

КонецПроцедуры // ДобавитьФильтрДиалога()

&НаКлиенте
Функция СтрокаФильтра(ФильтрДиалога)

	Возврат СтрСоединить(ФильтрДиалога, ""|"");

КонецФункции // СтрокаФильтра()


#КонецОбласти

// ===
// Перенести процедуру в область ""СлужебныеПроцедурыИФункции"". 
// ===
&НаКлиенте
Процедура <?""Имя элемента формы"">НачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры)

	Если ВыбранныеФайлы = Неопределено Тогда
	
		Возврат
	
	КонецЕсли;
	
	// ===
	// Код обработки выбора файла
	// ===

КонецПроцедуры // <?""Имя элемента формы"">НачалоВыбораЗавершение()

// === КОНЕЦ ШАБЛОНА ===
"}
}
}
},
{4,
{"JSON",1,0,"",""},
{0,
{"ЧтениеJSON",0,0,"json","ЧтениеJSON = Новый ЧтениеJSON;
ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
Структура = ПрочитатьJSON(ЧтениеJSON, Ложь);
Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
"}
},
{0,
{"ЧтениеJSON",0,0,"жсон","ЧтениеJSON = Новый ЧтениеJSON;
ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
Структура = ПрочитатьJSON(ЧтениеJSON, Ложь);
Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
"}
},
{0,
{"ЗаписьJSON",0,0,"json","ЗаписьJSON = Новый ЗаписьJSON;
ЗаписьJSON.УстановитьСтроку();
ЗаписатьJSON(ЗаписьJSON, Структура);
ТекстJSON = ЗаписьJSON.Закрыть();
"}
},
{0,
{"ЗаписьJSON",0,0,"жсон","ЗаписьJSON = Новый ЗаписьJSON;
ЗаписьJSON.УстановитьСтроку();
ЗаписатьJSON(ЗаписьJSON, Структура);
ТекстJSON = ЗаписьJSON.Закрыть();
"}
}
},
{1,
{"БлокировкаДанных",1,0,"",""},
{0,
{"БлокировкаДанных",0,0,"Блок[ировкаДанных]","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.ТоварыНаСкладах"");
ЭлементБлокировки.УстановитьЗначение(""Качество"", Справочники.Качество.НайтиПоКоду(""1""));
ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
ЭлементБлокировки.ИсточникДанных = ДокументОбъект.ВозвратнаяТара;
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Номенклатура"", ""Номенклатура"");
ЭлементБлокировки.ИспользоватьИзИсточникаДанных(""Склад"", ""Склад"");
Блокировка.Заблокировать();"}
}
}
},
{2,
{"Синтаксис",1,0,"",""},
{0,
{"Одинарные кавычки",0,0,"ээ","''"}
},
{0,
{"TODO",0,0,"ту[ду]","// TODO <?"""", ДатаВремя, ""ДФ=yyyy-MM-dd"">: <?>"}
}
},
{2,
{"Директивы компиляции",1,0,"",""},
{0,
{"Вставка",0,0,"Вст[авка]","#Вставка
<?>
#КонецВставки"}
},
{0,
{"Удаление",0,0,"Удал[ение]","#Удаление
<?>
#КонецУдаления"}
}
},
{1,
{"Статический анализ",1,0,"",""},
{6,
{"BSL LS",1,0,"",""},
{0,
{"Пустой блок ""Исключение"" (одна строка)",0,0,"бсл","// BSLLS:MissingCodeTryCatchEx-off"}
},
{0,
{"Пустой блок ""Исключение"" (блок)",0,0,"бсл","// BSLLS:MissingCodeTryCatchEx-off
<?>
// BSLLS:MissingCodeTryCatchEx-on
"}
},
{0,
{"Ограничение на длину строки (одна строка)",0,0,"бсл","// BSLLS:LineLength-off"}
},
{0,
{"Ограничение на длину строки (блок)",0,0,"бсл","// BSLLS:LineLength-off
<?>
// BSLLS:LineLength-on"}
},
{0,
{"Вложенные методы в конструкторах (одна строка)",0,0,"бсл","// BSLLS:NestedFunctionInParameters-off"}
},
{0,
{"Вложенные методы в конструкторах (блок)",0,0,"бсл","// BSLLS:NestedFunctionInParameters-off
<?>
// BSLLS:NestedFunctionInParameters-on"}
}
}
},
{1,
{"Универсальные коллекции значений",1,0,"",""},
{1,
{"Структура",1,0,"",""},
{0,
{"Перебор структуры",0,0,"Пере[бор]","// Перебор структуры
Для Каждого ЭлементСтруктуры Из <?""Структура""> Цикл
	// Сообщить(СтрШаблон(""Ключ: %1, Значение: %2"", ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение));
КонецЦикла;"}
}
}
}
}
}